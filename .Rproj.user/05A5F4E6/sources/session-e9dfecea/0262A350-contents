# Extracting the Raw IMC Data

## Setting Up a `conda` Environment

Anaconda is a program used to install packages needed for many steps of the pipeline to run. Follow the steps below to set up Anaconda and a `conda` environment:

1. Install [**Anaconda**](https://www.anaconda.com/download) <br>
2. Once Anaconda is installed, navigate to the relevant command line interface:

<div align="center">

| Windows                                                                                            | macOS                                                                                                      |
|----------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------|
| 1. Search for **'Anaconda Prompt'** in the taskbar search <br> 2. Select **Anaconda Prompt**  <br> | 1. Use `cmd + space` to open Spotlight Search  <br> 2. Type **'Terminal'** and press `return` to open <br> |

</div>
    
3. Enter the following commands (make sure to run the lines **one at a time**):

~~~~sh
git clone --recursive https://github.com/BodenmillerGroup/ImcSegmentationPipeline.git
cd ImcSegmentationPipeline
git clone --recursive https://github.com/CVR-MucosalImmunology/IMC.git
conda env create -f environment.yml
conda activate imcsegpipe
pip uninstall tifffile
pip install tifffile==2024.8.10
pip install jupyterlab
~~~~

The `imcsegpipe` conda environment has now been **set up**! To begin on the first step of the pipeline, copy the following commands into the terminal to **activate** this new environment:

~~~~sh
conda activate imcsegpipe
jupyter lab
~~~~

This will automatically open a Jupyter instance at `http://localhost:8888/lab` in your browser. Upload the `1 IMCPreprocessing.ipynb` file using the upload button. 

## Processing MCD Files

### Setting Up Your Folders

To begin, make sure to create the following empty folders in the **same** directory:

1. `analysis`: the directory you will work out of to perform your analysis
2. `raw`: the directory that holds the raw files as input into the pipeline

Your file directory should look something like this:

```text
IMC/
├── analysis
├── raw
```

Within the `raw` folder, there should be **2 types** of files:

**File Type #1:** The zipped `.mcd` files {-}

The Hyperion Imaging System produces vendor controlled `.mcd` and `.txt` files in the following folder structure:

```text
├── {XYZ}.mcd 
├── {XYZ}_ROI_001_1.txt 
├── {XYZ}_ROI_002_2.txt 
├── {XYZ}_ROI_003_3.txt 
```

where `XYZ` defines the filename, `ROI_001`, `ROI_002`, `ROI_003` are names (description) for the selected regions of interest (ROI) and `1`, `2`, `3` indicate the acquistion identifiers. The ROI description entry can be specified in the Fluidigm software when selecting ROIs. The `.mcd` file contains the raw imaging data of all acquired ROIs, while each `.txt` file contains data of a single ROI. 

To enforce a consistent naming scheme and to bundle all metadata, make sure to **zip the folder** for preprocessing. Each `.zip` file should only contain data from a **single** `.mcd` file (and any associated `.txt` files), and should be named `Sample1.zip`, `Sample2.zip` and so on. 

Your file directory should look something like this:

```text
raw/
├── Sample1.zip 
│     └── ├── {A}.mcd
│         ├── {A}_ROI_001_1.txt 
│         ├── {A}_ROI_002_2.txt 
│         └── {A}_ROI_003_3.txt
├── Sample2.zip 
│     └── ├── {B}.mcd
│         ├── {B}_ROI_001_1.txt 
│         ├── {B}_ROI_002_2.txt 
│         └── {B}_ROI_003_3.txt
└── ...
```

**File Type #2:** The `panel.csv` file {-}

The panel file (in `.csv` format) specifies the type of antibodies that were used in the experiment and all additional channels (eg. metals used for counterstaining) that you want to include in downstream processing. Example entries to the `panel.csv` file should look like this:

<div align="center">

| Metal Tag | Target      | Full | Segment |
|-----------|-------------|------|---------|
| Nd145     | CD83        | 1    | 0       |
| Nd146     | CD8         | 1    | 1       |
| Sm147     | Podoplanin  | 1    | 0       |
| Nd148     | CD16        | 1    | 0       |

</div>

- **Metal Tag**: indicates the isotope used
- **Target**: indicates the target marker for the particular isotope
- **Full**: a `1` specifies channels you wish to analyse later (eg. to calculate marker intensities for), while a `0` specifies channels you do not wish to analyse
- **Segment**: a `1` specifies channels that will specifically be used for segmentation in Cellpose later, while a `0` indicates channels that will not be used

Your `raw` folder should look like this:

```text
raw/
├── panel.csv 
├── Sample1.zip 
├── Sample2.zip 
├── Sample3.zip 
└── ... 
```

### Running the Code

Within the `1 IMCPreprocessing.ipynb` file, you are required to set the following variables in the first code chunk:

- `analysis`: set this to your `analysis` folder
- `raw`: set this to your `raw` folder

An example is shown below. For **Windows** users, make sure that you are using **forward slashes** rather than back slashes.  

```{python}
# Set this to your 'analysis' folder
analysis = "IMC/analysis"

# Set this to your 'raw' folder
raw = "IMC/raw"
```

Once you have finished setting your directories, you can **run** the rest of the code in the `.ipynb` file. After running, you will notice **3 new** folders created in your `analysis` folder:

1. `1a_extracted_mcd`: contains individual folders (one per sample), each of which contain multiple `.ome.tiff` files (one per acquisition) and other files extracted from the original `.mcd` file
2. `1b_for_segmentation`: contains the segmentation stacks for use in Cellpose, as well as `.csv` files indicating the channel order
3. `1c_full_images`: contains the full stacks for analysis, as well as `.csv` files indicating the channel order

After you see the message **'Done!'** printed, you can move to the next step.