[["index.html", "User Guide for IMC Analysis 1 IMC Data Analysis Pipeline 1.1 Overview of the IMC Data Analysis Pipeline 1.2 Structure of this Guide 1.3 Contributors", " User Guide for IMC Analysis Oscar Dong 2024-10-02 1 IMC Data Analysis Pipeline Author: Oscar Compiled: 2024-10-01 1.1 Overview of the IMC Data Analysis Pipeline This guide provides a detailed overview of an analysis pipeline designed to process and analyse single-cell data obtained from Imaging Mass Cytometry (IMC). It covers the entire workflow from data pre-processing to celltype analysis, ensuring users can extract meaningful biological insights from multiplexed imaging datasets. The pipeline is implemented across several platforms and software, including Python, ImageJ, R and CellProfiler. 1.2 Structure of this Guide The workflow is divided into the following key sections: Part A: extraction and processing of raw IMC images Part B: analysis of cell data in R For the full code, please refer to the GitHub repository. 1.3 Contributors Oscar Dong Heeva Baharlou Thomas O’Neil "],["extracting-the-raw-imc-data.html", "2 Extracting the Raw IMC Data 2.1 Setting Up a conda Environment 2.2 Processing MCD Files", " 2 Extracting the Raw IMC Data 2.1 Setting Up a conda Environment Anaconda is a program used to install packages needed for many steps of the pipeline to run. Follow the steps below to set up Anaconda and a conda environment: Install Anaconda Once Anaconda is installed, navigate to the relevant command line interface: Windows macOS 1. Search for ‘Anaconda Prompt’ in the taskbar search 2. Select Anaconda Prompt 1. Use cmd + space to open Spotlight Search 2. Type ‘Terminal’ and press return to open Enter the following commands (make sure to run the lines one at a time): git clone --recursive https://github.com/BodenmillerGroup/ImcSegmentationPipeline.git cd ImcSegmentationPipeline git clone --recursive https://github.com/CVR-MucosalImmunology/IMC.git conda env create -f environment.yml conda activate imcsegpipe pip uninstall tifffile pip install tifffile==2024.8.10 pip install jupyterlab The imcsegpipe conda environment has now been set up! To begin on the first step of the pipeline, copy the following commands into the terminal to activate this new environment: conda activate imcsegpipe jupyter lab This will automatically open a Jupyter instance at http://localhost:8888/lab in your browser. Upload the 1 IMCPreprocessing.ipynb file using the upload button: 2.2 Processing MCD Files 2.2.1 Setting Up Your Folders To begin, make sure to create the following empty folders in the same directory: analysis: the directory you will work out of to perform your analysis raw: the directory that holds the raw files as input into the pipeline Your file directory should look something like this: IMC/ ├── analysis ├── raw Within the raw folder, there should be 2 types of files: File Type #1: The zipped .mcd files {-} The Hyperion Imaging System produces vendor controlled .mcd and .txt files in the following folder structure: ├── {XYZ}.mcd ├── {XYZ}_ROI_001_1.txt ├── {XYZ}_ROI_002_2.txt ├── {XYZ}_ROI_003_3.txt where XYZ defines the filename, ROI_001, ROI_002, ROI_003 are names (description) for the selected regions of interest (ROI) and 1, 2, 3 indicate the acquistion identifiers. The ROI description entry can be specified in the Fluidigm software when selecting ROIs. The .mcd file contains the raw imaging data of all acquired ROIs, while each .txt file contains data of a single ROI. To enforce a consistent naming scheme and to bundle all metadata, make sure to zip the folder for preprocessing. Each .zip file should only contain data from a single .mcd file (and any associated .txt files), and should be named Sample1.zip, Sample2.zip and so on. Your file directory should look something like this: raw/ ├── Sample1.zip │ └── ├── {A}.mcd │ ├── {A}_ROI_001_1.txt │ ├── {A}_ROI_002_2.txt │ └── {A}_ROI_003_3.txt ├── Sample2.zip │ └── ├── {B}.mcd │ ├── {B}_ROI_001_1.txt │ ├── {B}_ROI_002_2.txt │ └── {B}_ROI_003_3.txt └── ... File Type #2: The panel.csv file {-} The panel file (in .csv format) specifies the type of antibodies that were used in the experiment and all additional channels (eg. metals used for counterstaining) that you want to include in downstream processing. Example entries to the panel.csv file should look like this: Metal Tag Target Full Segment Nd145 CD83 1 0 Nd146 CD8 1 1 Sm147 Podoplanin 1 0 Nd148 CD16 1 0 Metal Tag: indicates the isotope used Target: indicates the target marker for the particular isotope Full: a 1 specifies channels you wish to analyse later (eg. to calculate marker intensities for), while a 0 specifies channels you do not wish to analyse Segment: a 1 specifies channels that will specifically be used for segmentation in Cellpose later, while a 0 indicates channels that will not be used Your raw folder should look like this: raw/ ├── panel.csv ├── Sample1.zip ├── Sample2.zip ├── Sample3.zip └── ... 2.2.2 Running the Code Within the 1 IMCPreprocessing.ipynb file, you are required to set the following variables in the first code chunk: analysis: set this to your analysis folder raw: set this to your raw folder An example is shown below. For Windows users, make sure that you are using forward slashes rather than back slashes. # Set this to your &#39;analysis&#39; folder analysis = &quot;IMC/analysis&quot; # Set this to your &#39;raw&#39; folder raw = &quot;IMC/raw&quot; Once you have finished setting your directories, you can run the rest of the code in the .ipynb file. After running, you will notice 3 new folders created in your analysis folder: 1a_extracted_mcd: contains individual folders (one per sample), each of which contain multiple .ome.tiff files (one per acquisition) and other files extracted from the original .mcd file 1b_for_segmentation: contains the segmentation stacks for use in Cellpose, as well as .csv files indicating the channel order 1c_full_images: contains the full stacks for analysis, as well as .csv files indicating the channel order After you see the message ‘Done!’ printed, you can move to the next step. "],["processing-images-for-cellpose.html", "3 Processing Images For Cellpose 3.1 Removing Outliers From Images 3.2 Generating Images for Cellpose", " 3 Processing Images For Cellpose 3.1 Removing Outliers From Images The next step involves removing outlier pixels from each image channel in your full stack images. This is done by the ImageJ script 1.5 RemoveOutliers.ijm, which uses the built-in Remove Outliers... function. You can read more about the function here. After opening the script, remember to set your analysis folder directory before running it. Again, Windows users should ensure that they use forward slashes instead of back slashes in their directory path. // Set your &#39;analysis&#39; folder directory dir = &quot;IMC/analysis&quot;; The modified images are saved to the same analysis/1c_full_images folder, and will simply replace the old images. 3.2 Generating Images for Cellpose In this step, we generate composite images to use for cell segmentation in Cellpose later on. This is done by the ImageJ script 2 ExtractForCellPose.ijm, which generates image stacks containing 2 channels: 1 for the cell nuclei (in blue) and 1 for the rest of the cell body (in green). The cell body channel is generated by taking an ‘Average Intensity’ projection of all the channels labelled 1 in the ‘Segment’ column of panel.csv. Open the ImageJ script 2 ExtractForCellPose.ijm and change all required variables there before running it. square_size controls the size of the square (in pixels) used to generate random crops of each image - these are used in Cellpose later to train the segmentation model. // Set your &#39;analysis&#39; folder directory dir = &quot;IMC/analysis&quot;; // Set your &#39;panel.csv&#39; file directory panelDir = &quot;IMC/raw/panel.csv&quot;; // Change this to what you call your nuclei stain under the &#39;Target&#39; column in &#39;panel.csv&#39;. // This usually corresponds to the Ir191 or Ir193 Metal tags. dna = &quot;DNA&quot;; // Size (in pixels) of the square for cropping square_size = 200; The full images are saved under analysis/2a_cellpose_full, and the cropped areas are saved to analysis/2b_cropped_images. "],["cell-segmentation-using-cellpose.html", "4 Cell Segmentation Using Cellpose 4.1 Installing and Opening Cellpose 4.2 Using the Cellpose GUI 4.3 Training a Custom Cellpose Model 4.4 Batch Segmentation", " 4 Cell Segmentation Using Cellpose 4.1 Installing and Opening Cellpose Cellpose is a generalist algorithm for cell and nucleus segmentation that supports the ability to train custom models for your own datasets. To install it, open Anaconda Prompt and run the following commands, depending on whether you have a CPU or GPU: CPU Version conda create --name cellpose python=3.9 conda activate cellpose python -m pip install cellpose[gui] GPU Version conda create --name cellpose python=3.9 conda install pytorch pytorch-cuda=11.6 -c pytorch -c nvidia conda activate cellpose python -m pip install cellpose[gui] To open Cellpose (both now and in the future), run the following commands: conda activate cellpose python -m cellpose 4.2 Using the Cellpose GUI Note: The steps below were written based on the Cellpose 3 GUI - newer versions may differ slightly Drag an image from the 2b_cropped_images folder into the GUI Click Models → Add custom torch model to GUI and select your custom model (in this case, the model used was titled IFMasksOnIMCModel_HumanColon_TN3_CD12_FT1) There are several settings available for you to change: GUI Setting Description diameter (pixels) Approximate diameter of each cell - you can manually enter this, or press calibrate to let the model estimate it (the size is represented by a disk at the bottom left of the view window) chan to segment Colour channel containing the cell body - should be set to 2: green chan2 (optional) Colour channel containing the cell nuclei - should be set to 3: blue use GPU Whether to use the GPU - should be ticked if possible to speed up segmentation additional settings You can read more about these settings (eg. flow threshold) here Select your custom model under the Other models pane and click the run button next to it to start the segmentation: After the model has finished running, you should see masks drawn around each of your segmented cells: Note: you can toggle the coloured masks on and off by pressing X on your keyboard, and also the segmentation outlines by pressing Z. If the model requires further tuning, then go to the section below on ‘Training a custom model’ - this will teach you how to build a model from scratch. Otherwise, if you are happy with the model’s performance, skip straight to the ‘Batch segmentation’ section. 4.3 Training a Custom Cellpose Model To train a custom Cellpose model, follow the steps below. There is also a YouTube video here that also demonstrates the process. Drag an image from the 2b_cropped_images folder into the GUI Ensure that your GUI settings are all configured appropriately (eg. your cell diameter is set correctly) - see the table in the section ‘Using the Cellpose GUI’ above for help with this Under the Other models pane, click the dataset-specific models button to bring up a drop-down menu of built-in Cellpose models Test each of these models on your image by selecting them and pressing run (there is also the additional cyto3 model you can run by pressing run cyto3 next to the use GPU checkbox) Select the pre-trained model that worked best for your image and run it again Correct the segmentation results as you see fit by drawing new ROIs (right-click, draw and right-click again) and deleting incorrect ones (Ctrl + left-click) - remember to press Ctrl + S to save your changes Press Ctrl + T to open up the interface for training a new model: Set initial model to the pre-trained model you ran in Step 5, name your custom model and press OK (the default values for the other parameters should work well in most cases) The model will train and then auto-run on the next image in the folder Repeat Steps 6-9 until you are happy with the model’s performance The trained model is saved in a new models sub-folder within your 2b_cropped_images folder, and will also appear in the GUI under the Other models pane (in the custom models drop-down menu) Note: it is recommended you name your model in a systematic way to keep track of the settings you applied. Our model (IFMasksOnIMCModel_HumanColon_TN3_CD12_FT1) was named with special suffixes at the end to keep track of this information: - TN3: the initial model used was tissuenet_cp3 - CD12: the cell diameter was set to 12 pixels - FT1: the flow threshold was set to 1 You are now ready to use the model for ‘Batch segmentation’ in the next section. 4.4 Batch Segmentation Once you are happy with the model’s performance, run the following commands in Anaconda Prompt: conda activate cellpose pip install jupyterlab pip install chardet pip install --upgrade charset-normalizer pip install --upgrade requests jupyter conda install -c anaconda numpy conda install -c conda-forge scikit-image conda install -c conda-forge matplotlib jupyter lab Once again, this will automatically open a Jupyter instance at http://localhost:8888/lab in your browser. Upload the 3 CellposeBatchSeg.ipynb file using the upload button and set the following variables: model_path: path to your custom model analysis_dir: path to your analysis folder channels: colour channels used for segmentation cell_diameter, flow_threshold, cellprob_threshold: other settings used when training your custom model An example is shown below. # Set your required variables here model_path = &quot;IFMasksOnIMCModel_HumanColon_TN3_CD12_FT1&quot; analysis_dir = &quot;IMC/analysis&quot; channels = [2, 3] # This means Channel 1 was &#39;Green&#39; and Channel 2 was &#39;Blue&#39; (1 = R, 2 = G, 3 = B) cell_diameter = 12.4 flow_threshold = 3 cellprob_threshold = -6 Once you have finished setting your directories, you can run the rest of the code in the .ipynb file. After running, you will notice 3 new folders created in your analysis folder: 3a_segmentation_masks: contains the integer-labelled cell segmentation masks (1 for each image) 3b_for_cellprofiler: contains the segmentation masks and corresponding full stack images for use in CellProfiler 5_cellprofiler_output: an empty folder that will contain the output from CellProfiler After you see the message ‘Done!’ printed, you can move to the next step. "],["generating-compartment-and-structural-masks.html", "5 Generating Compartment and Structural Masks 5.1 Generating Epithelial Masks", " 5 Generating Compartment and Structural Masks 5.1 Generating Epithelial Masks For epithelial segmentation, open the ImageJ script 4 ExtractEpiMask.ijm and change all required variables there before running it: // Set your &#39;analysis&#39; folder directory dir = &quot;IMC/analysis&quot;; // Specify the channel number in the full image stack that contains your epithelial stain (eg. E-cadherin) channelNo = 7; Note: there are also some optional variables you can change too if you wish: // Apply threshold. Takes either an integer number up to 65535 or a preset algorithm like &quot;Triangle&quot;. thresh = &quot;Triangle&quot;; // After segmenting will remove epithelium below this pixel area size. Increase to remove more scraps. epiSize = 150; // Gaussian blur. Increase if too many grainy dots in final mask or want mask to look smoother. blurr = 0.75; // Erode x2 then dilate x2 to get rid of small attachments to larger epithelium. Increase if too many scraps emanating from epithelium you need to trim off. erodeNum = 2; dilateNum = 2; // Built-in delay so user can check if happy with result. Also prints number of current image for user to note down if any issues with image. // 1000 is 1 second. The image name then pops up for delayTime + 2 seconds to give you time to write down the image name. delayTime = 1000; This script generates masks for epithelial areas in an image stack by: Extracting a user-specified channel Normalising it Applying a user-defined threshold Filtering out small particles Eroding the mask to remove residual attachments to the epithelium Dilating the mask A delay is built into the macro to allow the user to visually check the results during processing and note down names of any ‘trouble images’ which require correction. All masks are saved to the existing analysis/3b_for_cellprofiler folder, with the suffix _full_EP at the end of the filename. To correct any ‘trouble images’, follow the steps below: Open them and run Invert LUT from the task bar Use one of the selection tools to outline areas for removal Press the Backspace key to delete these areas, which will then become black (assigned a value of 0) Run Invert LUT again so the epithelium is black and the background is white (as shown below) Save the image under the same filename it was originally saved to "],["processing-data-in-cellprofiler.html", "6 Processing Data in CellProfiler 6.1 Installing CellProfiler 6.2 Using CellProfiler", " 6 Processing Data in CellProfiler 6.1 Installing CellProfiler CellProfiler is a tool we will use to calculate marker intensities and other metrics for each segmented cell. Install it from here. As part of the pipeline, we will be using some custom plugins for CellProfiler. Configure CellProfiler to use the plugins by following the steps below: Open the CellProfiler GUI Select File → Preferences… Scroll down and set CellProfiler plugins directory to path/to/ImcSegmentationPipeline/resources/ImcPluginsCP/plugins Restart CellProfiler 6.2 Using CellProfiler To use CellProfiler, open 5 MeasureMarkers.cpproj and follow the steps below: Drag and drop the analysis/3b_for_cellprofiler folder into the CellProfiler Images window: Select File → Preferences… Set Default Output Folder to analysis/5_cellprofiler_output and click Save Click the first MeasureMarkerIntensityMultichannel module on the left hand side of the screen (the FullStack box in Select images to measure should be ticked), and set the number of channels in your full image stack: Click the first ExportToSpreadsheet module on the left hand side of the screen, press the Press button to select measurements button, click cell → Intensity → MeanIntensity to open a series of drop-down menus, make sure the 3 boxes below are ALL ticked, and click OK: Click the Analyze Images button at the bottom of the screen and wait for CellProfiler to finish running After CellProfiler has finished running, the following files will have been generated in the analysis/5_cellprofiler_output folder: - cell.csv: contains features (columns) for each cell (rows) - Experiment.csv: contains metadata related to the CellProfiler version used - Image.csv: contains image-level measurements (eg. channel intensities) and acquisition metadata - Object relationships.csv: contains neighbour information in form of an edge list between cells Now, you are ready to proceed to the R part of the pipeline. "]]
